package com.meirusfandi.cataloguemovie.notification;import android.content.Intent;import android.os.Build;import android.os.Bundle;import android.preference.Preference;import android.preference.PreferenceFragment;import android.preference.SwitchPreference;import android.provider.Settings;import android.support.annotation.NonNull;import android.support.annotation.RequiresApi;import android.widget.Toast;import com.meirusfandi.cataloguemovie.BuildConfig;import com.meirusfandi.cataloguemovie.R;import com.meirusfandi.cataloguemovie.data.MovieModel;import com.meirusfandi.cataloguemovie.data.network.MovieClients;import com.meirusfandi.cataloguemovie.data.network.MovieInterface;import com.meirusfandi.cataloguemovie.data.network.MovieResponse;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Locale;import java.util.Objects;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class SettingsActivity extends CustomActivity{    public static String API_KEY = BuildConfig.API_KEY;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        // load settings fragment        getFragmentManager().beginTransaction().replace(android.R.id.content, new MainPreferenceFragment()).commit();    }    public static class MainPreferenceFragment extends PreferenceFragment implements Preference.OnPreferenceChangeListener{        SwitchPreference switchReminder;        SwitchPreference switchToday;        DailyReminder movieDailyReceiver = new DailyReminder();        UpcomingReminder movieUpcomingReceiver = new UpcomingReminder();        List<MovieModel> movieList;        List<MovieModel> sameMovieList;        @Override        public void onCreate(final Bundle savedInstanceState) {            super.onCreate(savedInstanceState);            addPreferencesFromResource(R.xml.settings);            movieList = new ArrayList<>();            sameMovieList = new ArrayList<>();            switchReminder = (SwitchPreference) findPreference(getString(R.string.key_today_reminder));            switchReminder.setOnPreferenceChangeListener(this);            switchToday = (SwitchPreference) findPreference(getString(R.string.key_release_reminder));            switchToday.setOnPreferenceChangeListener(this);            Preference myPref = findPreference(getString(R.string.key_lang));            myPref.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {                public boolean onPreferenceClick(Preference preference) {                    startActivity(new Intent(Settings.ACTION_LOCALE_SETTINGS));                    return true;                }            });        }        @Override        public boolean onPreferenceChange(Preference preference, Object newValue) {            String key = preference.getKey();            boolean b = (boolean) newValue;            if(key.equals(getString(R.string.key_today_reminder))){                if(b){                    movieDailyReceiver.setAlarm(getActivity());                }else{                    movieDailyReceiver.cancelAlarm(getActivity());                }            }else{                if(b){                    setReleaseAlarm();                }else{                    movieUpcomingReceiver.cancelAlarm(getActivity());                }            }            return true;        }        MovieInterface movieService;        Call<MovieResponse> movieCall;        String lang = BuildConfig.LANGUAGE;        private void setReleaseAlarm(){            movieService = MovieClients.getClient().create(MovieInterface.class);            movieCall = movieService.getUpcoming(API_KEY, lang);            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());            Date date = new Date();            final String now = dateFormat.format(date);            movieCall.enqueue(new Callback<MovieResponse>() {                @RequiresApi(api = Build.VERSION_CODES.KITKAT)                @Override                public void onResponse(@NonNull Call<MovieResponse> call, @NonNull Response<MovieResponse> response) {                    movieList = Objects.requireNonNull(response.body()).getMovieModels();                    for(MovieModel movieResult : movieList){                        if(movieResult.getRelease().equals(now)){                            sameMovieList.add(movieResult);                        }                    }                    movieUpcomingReceiver.setAlarm(getActivity(), sameMovieList);                }                @Override                public void onFailure(@NonNull Call<MovieResponse> call, @NonNull Throwable t) {                    Toast.makeText(getActivity(), R.string.error_getting_data                            , Toast.LENGTH_SHORT).show();                }            });        }    }}