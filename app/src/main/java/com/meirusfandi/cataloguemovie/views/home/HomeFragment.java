package com.meirusfandi.cataloguemovie.views.home;import android.app.ProgressDialog;import android.content.Context;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.Parcelable;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.annotation.RequiresApi;import android.support.v4.app.Fragment;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Toast;import com.meirusfandi.cataloguemovie.BuildConfig;import com.meirusfandi.cataloguemovie.R;import com.meirusfandi.cataloguemovie.data.MovieModel;import com.meirusfandi.cataloguemovie.data.network.MovieClients;import com.meirusfandi.cataloguemovie.data.network.MovieInterface;import com.meirusfandi.cataloguemovie.data.network.MovieResponse;import com.meirusfandi.cataloguemovie.helper.MovieAdapter;import java.util.ArrayList;import java.util.List;import java.util.Objects;import butterknife.BindView;import butterknife.ButterKnife;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class HomeFragment extends Fragment {    @BindView(R.id.recycler_home)    RecyclerView recyclerView;    @BindView(R.id.swipe)    SwipeRefreshLayout swipe;    MovieAdapter movieAdapter;    List<MovieModel> movieModels;    private static final String API_KEY = BuildConfig.API_KEY;    @RequiresApi(api = Build.VERSION_CODES.KITKAT)    @Override    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        Objects.requireNonNull(getActivity()).setTitle(R.string.bar_home);        ButterKnife.bind(this, view);        movieModels = new ArrayList<>();        movieAdapter = new MovieAdapter(movieModels, getContext());        movieAdapter.notifyDataSetChanged();        recyclerView.setHasFixedSize(true);        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));        recyclerView.setAdapter(movieAdapter);        if (savedInstanceState == null){            getData();        }//        else {//            ArrayList<MovieModel> myMovies;//            myMovies = savedInstanceState.getParcelableArrayList("movie");//            movieAdapter.setMovieModels(myMovies);//            movieAdapter.notifyDataSetChanged();//            recyclerView.setAdapter(movieAdapter);//        }        swipe.setColorScheme(android.R.color.holo_blue_bright,                android.R.color.holo_green_light,                android.R.color.holo_orange_light,                android.R.color.holo_red_light);        swipe.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {            @Override            public void onRefresh() {                new Handler().postDelayed(new Runnable() {                    @Override                    public void run() {                        swipe.setRefreshing(false);                        getData();                    }                }, 3000);            }        });    }    MovieInterface endPoint;    Call<MovieResponse> movieResponseCall;    public void getData(){        final ProgressDialog dialog = new ProgressDialog(getContext());        dialog.setMessage(getString(R.string.loading_message));        dialog.setCancelable(false);        dialog.show();        String lang = BuildConfig.LANGUAGE;        endPoint = MovieClients.getClient().create(MovieInterface.class);        movieResponseCall = endPoint.getNowPlaying(API_KEY, lang);        movieResponseCall.enqueue(new Callback<MovieResponse>() {            @RequiresApi(api = Build.VERSION_CODES.KITKAT)            @Override            public void onResponse(@NonNull Call<MovieResponse> call, @NonNull Response<MovieResponse> response) {                movieModels = Objects.requireNonNull(response.body()).getMovieModels();                movieAdapter = new MovieAdapter(movieModels, getContext());                movieAdapter.notifyDataSetChanged();                recyclerView.setAdapter(movieAdapter);                Toast.makeText(getContext(), R.string.success_load_data, Toast.LENGTH_LONG).show();                dialog.dismiss();            }            @Override            public void onFailure(@NonNull Call<MovieResponse> call, @NonNull Throwable t) {                dialog.dismiss();                Toast.makeText(getContext(), R.string.error_load_data, Toast.LENGTH_LONG).show();            }        });    }    @Override    public void onSaveInstanceState(@NonNull Bundle outState) {        super.onSaveInstanceState(outState);        movieAdapter = new MovieAdapter(movieModels, getContext());        movieAdapter.notifyDataSetChanged();        outState.putParcelableArrayList("movie", new ArrayList<Parcelable>(movieAdapter.getMovieModels()));    }    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        if (savedInstanceState != null){            ArrayList<MovieModel> movies;            movies = savedInstanceState.getParcelableArrayList("movie");            movieAdapter.setMovieModels(movies);            movieAdapter.notifyDataSetChanged();            recyclerView.setAdapter(movieAdapter);        }    }    @Override    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_home, container, false);    }    @Override    public void onAttach(Context context) {        super.onAttach(context);    }    @Override    public void onDetach() {        super.onDetach();    }    public interface OnFragmentInteractionListener {        // TODO: Update argument type and name        void onFragmentInteraction(Uri uri);    }}