package com.meirusfandi.cataloguemovie.data.local;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.SQLException;import android.database.sqlite.SQLiteDatabase;import com.meirusfandi.cataloguemovie.data.MovieModel;import java.util.ArrayList;import static android.provider.BaseColumns._ID;import static com.meirusfandi.cataloguemovie.data.local.DatabaseContract.FavoriteColumns.BACKDROP;import static com.meirusfandi.cataloguemovie.data.local.DatabaseContract.FavoriteColumns.OVERVIEW;import static com.meirusfandi.cataloguemovie.data.local.DatabaseContract.FavoriteColumns.POPULARITY;import static com.meirusfandi.cataloguemovie.data.local.DatabaseContract.FavoriteColumns.POSTER;import static com.meirusfandi.cataloguemovie.data.local.DatabaseContract.FavoriteColumns.RATE_AVG;import static com.meirusfandi.cataloguemovie.data.local.DatabaseContract.FavoriteColumns.RELEASE;import static com.meirusfandi.cataloguemovie.data.local.DatabaseContract.FavoriteColumns.TITLE;import static com.meirusfandi.cataloguemovie.data.local.DatabaseContract.TABLE_FAVORITE;public class MovieHelper {    private static String DATABASE_TABLE    = TABLE_FAVORITE;    private Context context;    private DatabaseHelper helper;    private SQLiteDatabase database;    public MovieHelper(Context context) {        this.context = context;    }    //open connection    public MovieHelper open() throws SQLException {        helper  = new DatabaseHelper(context);        database= helper.getWritableDatabase();        return this;    }    //close connection    public void close(){        helper.close();    }    //select DB query    public ArrayList<MovieModel> getAllMovie(){        ArrayList<MovieModel> movies = new ArrayList<>();        Cursor cursor = database.query(DATABASE_TABLE,                null, null, null, null,                null, _ID+" DESC", null);        cursor.moveToFirst();        MovieModel movie;        if (cursor.getCount() > 0){            do {                movie = new MovieModel();                movie.setId(cursor.getInt(cursor.getColumnIndexOrThrow(_ID)));                movie.setTitle(cursor.getString(cursor.getColumnIndexOrThrow(TITLE)));                movie.setRelease(cursor.getString(cursor.getColumnIndexOrThrow(RELEASE)));                movie.setOverview(cursor.getString(cursor.getColumnIndexOrThrow(OVERVIEW)));                movie.setPoster(cursor.getString(cursor.getColumnIndexOrThrow(POSTER)));                movie.setBackdrop(cursor.getString(cursor.getColumnIndexOrThrow(BACKDROP)));                movie.setRating(cursor.getString(cursor.getColumnIndexOrThrow(RATE_AVG)));                movie.setPopularity(cursor.getString(cursor.getColumnIndexOrThrow(POPULARITY)));                movies.add(movie);                cursor.moveToNext();            } while (!cursor.isAfterLast());        }        cursor.close();        return movies;    }    public Cursor queryByIdProvider(String id){        return database.query(TABLE_FAVORITE,                null,                _ID+" = ?",                new String[]{id},                null,                null,                null,                null);    }    public Cursor queryProvider(){        return database.query(TABLE_FAVORITE,                null,                null,                null,                null,                null,                _ID+" DESC");    }    public long insertProvider(ContentValues values){        return database.insert(TABLE_FAVORITE, null, values);    }    public int updateProvider(String id, ContentValues values){        return database.update(TABLE_FAVORITE, values, _ID+ " ?", new String[]{id});    }    public int deleteProvider(String id){        return database.delete(TABLE_FAVORITE, _ID+" = ?", new String[]{id});    }}